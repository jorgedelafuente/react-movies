/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UpcomingIndexImport } from './routes/upcoming/index'
import { Route as TopRatedIndexImport } from './routes/top-rated/index'
import { Route as PopularIndexImport } from './routes/popular/index'
import { Route as FilmFilmIdImport } from './routes/film/$filmId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UpcomingIndexRoute = UpcomingIndexImport.update({
  path: '/upcoming/',
  getParentRoute: () => rootRoute,
} as any)

const TopRatedIndexRoute = TopRatedIndexImport.update({
  path: '/top-rated/',
  getParentRoute: () => rootRoute,
} as any)

const PopularIndexRoute = PopularIndexImport.update({
  path: '/popular/',
  getParentRoute: () => rootRoute,
} as any)

const FilmFilmIdRoute = FilmFilmIdImport.update({
  path: '/film/$filmId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/film/$filmId.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/film/$filmId': {
      id: '/film/$filmId'
      path: '/film/$filmId'
      fullPath: '/film/$filmId'
      preLoaderRoute: typeof FilmFilmIdImport
      parentRoute: typeof rootRoute
    }
    '/popular/': {
      id: '/popular/'
      path: '/popular'
      fullPath: '/popular'
      preLoaderRoute: typeof PopularIndexImport
      parentRoute: typeof rootRoute
    }
    '/top-rated/': {
      id: '/top-rated/'
      path: '/top-rated'
      fullPath: '/top-rated'
      preLoaderRoute: typeof TopRatedIndexImport
      parentRoute: typeof rootRoute
    }
    '/upcoming/': {
      id: '/upcoming/'
      path: '/upcoming'
      fullPath: '/upcoming'
      preLoaderRoute: typeof UpcomingIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/popular': typeof PopularIndexRoute
  '/top-rated': typeof TopRatedIndexRoute
  '/upcoming': typeof UpcomingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/popular': typeof PopularIndexRoute
  '/top-rated': typeof TopRatedIndexRoute
  '/upcoming': typeof UpcomingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/film/$filmId': typeof FilmFilmIdRoute
  '/popular/': typeof PopularIndexRoute
  '/top-rated/': typeof TopRatedIndexRoute
  '/upcoming/': typeof UpcomingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/film/$filmId' | '/popular' | '/top-rated' | '/upcoming'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/film/$filmId' | '/popular' | '/top-rated' | '/upcoming'
  id:
    | '__root__'
    | '/'
    | '/film/$filmId'
    | '/popular/'
    | '/top-rated/'
    | '/upcoming/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FilmFilmIdRoute: typeof FilmFilmIdRoute
  PopularIndexRoute: typeof PopularIndexRoute
  TopRatedIndexRoute: typeof TopRatedIndexRoute
  UpcomingIndexRoute: typeof UpcomingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FilmFilmIdRoute: FilmFilmIdRoute,
  PopularIndexRoute: PopularIndexRoute,
  TopRatedIndexRoute: TopRatedIndexRoute,
  UpcomingIndexRoute: UpcomingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/film/$filmId",
        "/popular/",
        "/top-rated/",
        "/upcoming/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/film/$filmId": {
      "filePath": "film/$filmId.tsx"
    },
    "/popular/": {
      "filePath": "popular/index.tsx"
    },
    "/top-rated/": {
      "filePath": "top-rated/index.tsx"
    },
    "/upcoming/": {
      "filePath": "upcoming/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
